/*
 * Copyright Â© 2018 The Authors (see NOTICE file)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package uk.ac.cam.acr31.features.javac;

import static com.google.common.truth.Truth.assertThat;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.junit.runners.JUnit4;
import uk.ac.cam.acr31.features.javac.graph.FeatureGraph;
import uk.ac.cam.acr31.features.javac.proto.GraphProtos.FeatureEdge.EdgeType;
import uk.ac.cam.acr31.features.javac.testing.FeatureGraphChecks;
import uk.ac.cam.acr31.features.javac.testing.SourceSpan;
import uk.ac.cam.acr31.features.javac.testing.TestCompilation;

@RunWith(JUnit4.class)
public class ComputedFromTest {

  @Test
  public void computedFrom_addsEdgesToLocalVariables_inAssignment() {
    // ARRANGE
    TestCompilation compilation =
        TestCompilation.compile(
            "Test.java", //
            "public class Test {",
            "  public static void main(String[] args) {",
            "    int a = 0;",
            "    int b = 0;",
            "    int c;",
            "    c = a + b;",
            "  }",
            "}");
    SourceSpan a = compilation.sourceSpan("a", " + b;");
    SourceSpan b = compilation.sourceSpan("b", ";");
    SourceSpan c = compilation.sourceSpan("c", " = a + b;");

    // ACT
    FeatureGraph graph =
        FeaturePlugin.createFeatureGraph(compilation.compilationUnit(), compilation.context());

    // ASSERT
    assertThat(graph.edges(EdgeType.COMPUTED_FROM))
        .containsExactly(
            FeatureGraphChecks.edgeBetween(graph, c, a, EdgeType.COMPUTED_FROM),
            FeatureGraphChecks.edgeBetween(graph, c, b, EdgeType.COMPUTED_FROM));
  }

  @Test
  public void computedFrom_addsEdgesToLocalVariables_inVariable() {
    // ARRANGE
    TestCompilation compilation =
        TestCompilation.compile(
            "Test.java", //
            "public class Test {",
            "  public static void main(String[] args) {",
            "    int a = 0;",
            "    int b = 0;",
            "    int c = a + b;",
            "  }",
            "}");
    SourceSpan a = compilation.sourceSpan("a", " + b;");
    SourceSpan b = compilation.sourceSpan("b", ";");
    SourceSpan c = compilation.sourceSpan("c", " = a + b;");

    // ACT
    FeatureGraph graph =
        FeaturePlugin.createFeatureGraph(compilation.compilationUnit(), compilation.context());

    // ASSERT
    assertThat(graph.edges(EdgeType.COMPUTED_FROM))
        .containsExactly(
            FeatureGraphChecks.edgeBetween(graph, c, a, EdgeType.COMPUTED_FROM),
            FeatureGraphChecks.edgeBetween(graph, c, b, EdgeType.COMPUTED_FROM));
  }

  @Test
  public void computedFrom_excludesTypeIdentifiers() {
    // ARRANGE
    TestCompilation compilation =
        TestCompilation.compile(
            "Test.java", //
            "public class Test {",
            "  static String[] s = new String[] {};",
            "}");

    // ACT
    FeatureGraph graph =
        FeaturePlugin.createFeatureGraph(compilation.compilationUnit(), compilation.context());

    // ASSERT
    assertThat(graph.edges(EdgeType.COMPUTED_FROM)).isEmpty();
  }

  @Test
  public void computedFrom_excludesAnonymousParameters() {
    // This example causes synthetic identifier x to be generated by the compiler to pass to the
    // super-constructor of the anonymous inner class
    // ARRANGE
    TestCompilation compilation =
        TestCompilation.compile(
            "Test.java", //
            "public class Test {",
            "  Test(int x) {}",
            "  void test() {",
            "    Test t = new Test(4) {",
            "       int a = 0;",
            "    };",
            "  }",
            "}");

    // ACT
    FeatureGraph graph =
        FeaturePlugin.createFeatureGraph(compilation.compilationUnit(), compilation.context());

    // ASSERT
    assertThat(graph.edges(EdgeType.COMPUTED_FROM)).isEmpty();
  }
}
